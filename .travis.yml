language: node_js

node_js:
  - "10"

notifications:
  email: false

cache:
  yarn: true
  directories:
    - node_modules

before_install:
  # decrypt Google App Engine client secret
  - openssl aes-256-cbc -K $encrypted_fcdc1e9b32f5_key -iv $encrypted_fcdc1e9b32f5_iv
    -in keys/gae-client-secret.json.enc -out keys/gae-client-secret.json -d
  # install specific version of yarn, as the one provided by Travis does not
  # support pinning package versions yet (using "resolutions" property in
  # package.json)
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.13.0
  # make prisma available
  - export PATH="$(yarn global bin):$PATH"
  - yarn global add prisma

script:
  # configuration

  # constatns
  # APP_ENGINE_PROJECT_NAME is set on repo creation
  # PRISMA_SERVER is set on repo creation
  # PRISMA_SERVICE_NAME is set on repo creation

  # Release names may only use [a-zA-Z0-9] and be no longer than 63 chars
  # We should be able to have RELEASE_NAME be "dev" / "production" as well
  # a-zA-Z0-9 and dashes, but may not start with a dash
  # see https://cloud.google.com/appengine/docs/standard/nodejs/config/appref
  - export RELEASE_NAME="$(node scripts/generate-release-name.js)-$TRAVIS_BUILD_ID"

  # next stage
  - |
    export PRISMA_STAGE="$RELEASE_NAME"
    export PRISMA_ENDPOINT="$PRISMA_SERVER/$PRISMA_SERVICE_NAME/$PRISMA_STAGE"
    # where frontend deploys to
    export FRONTEND_ENDPOINT="https://$RELEASE_NAME-dot-$APP_ENGINE_PROJECT_NAME.appspot.com"
    # where graphql-service deploys to
    export GRAPHQL_ENDPOINT="https://$RELEASE_NAME-dot-graphql-server-dot-$APP_ENGINE_PROJECT_NAME.appspot.com"

  # generate client and deploy prisma schema (uses PRISMA_ENDPOINT)
  - "pushd graphql-server/prisma-services; prisma deploy --json; popd"

  # build graphql-server (requires generated prisma client)
  - node scripts/generate-app-yaml.js graphql-server/app.template.yaml graphql-server/app.yaml
  # - yarn gs:deploy

  # build frontend (requires GRAPHQL_ENDPOINT)
  - node scripts/generate-app-yaml.js frontend/app.template.yaml frontend/app.yaml
  - yarn fe:build

# https://docs.travis-ci.com/user/deployment/google-app-engine/
deploy:
  - provider: gae
    config: frontend/app.yaml
    # is decrypted by script in before_install
    keyfile: keys/gae-client-secret.json
    # even though the project is contained in the gae-client-secret,
    # we need to specify it as gcloud will use the repo name otherwise
    project: henry-228416
    # Ein Name kann Zahlen, Buchstaben und Bindestriche enthalten.
    # Er darf höchstens 63 Zeichen lang sein und darf nicht mit einem Bindestrich
    # beginnen oder enden. Wählen Sie für jeden Dienst und jede Version einen
    # eindeutigen Namen. Verwenden Sie nicht identische Namen für Dienste und
    # Versionen.
    version: $RELEASE_NAME
    # depends on whether this is production, staging or branch deployment
    no_promote: true
    # depends on whether this is production, staging or branch deployment
    no_stop_previous_version: true
    # not sure whether this is needed
    skip_cleanup: true
    # deploy from all branches
    on:
      all_branches: true
  - provider: gae
    config: graphql-server/app.yaml
    # is decrypted by script in before_install
    keyfile: keys/gae-client-secret.json
    # even though the project is contained in the gae-client-secret,
    # we need to specify it as gcloud will use the repo name otherwise
    project: henry-228416
    # Ein Name kann Zahlen, Buchstaben und Bindestriche enthalten.
    # Er darf höchstens 63 Zeichen lang sein und darf nicht mit einem Bindestrich
    # beginnen oder enden. Wählen Sie für jeden Dienst und jede Version einen
    # eindeutigen Namen. Verwenden Sie nicht identische Namen für Dienste und
    # Versionen.
    version: $RELEASE_NAME
    # depends on whether this is production, staging or branch deployment
    no_promote: true
    # depends on whether this is production, staging or branch deployment
    no_stop_previous_version: true
    # not sure whether this is needed
    skip_cleanup: true
    # deploy from all branches
    on:
      all_branches: true

after_script:
  # log for sanity
  - |
    echo $PRISMA_ENDPOINT # used by "prisma deploy" & "prisma generate"
    echo $FRONTEND_ENDPOINT
    echo $GRAPHQL_ENDPOINT
